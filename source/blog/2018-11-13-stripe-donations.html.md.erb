---
published: false
title:  "Fast, cheap way to add payment to your site using Stripe, React, ExpressJs, and AWS-Lambda"
blurb: ""
author: James Lowrey
tags: js
---

Setting up Stripe payments can be confusing, but worthwhile. 
While platforms like Patreon or tools like [Donorbox](https://donorbox.org/nonprofit-blog/) can simplify this process, they also cost more money.
This guide will show you how to add user-defined donations on your React website, how to setup a simple ExpressJs backend to process those payments, and how to cheaply publish it at scale with AWS Lambda.

<%= partial "partials/article_links.erb", locals: {
resources: "
- [Stripe API](https://stripe.com/docs/api)
- [Stripe Checkout](https://stripe.com/docs/checkout)
- [Stripe Donation]
",
    software_versions: "
- React 16.4.2
- ExpressJs 4.16.4
- Claudia 5.1.2
- AWS-serverless-express 3.3.5
- Stripe 6.1.3
- Ubuntu 18.04
- material-ui 3.2.0
"
  } %>


## Adding Stripe to your React client

First we'll setup our client.
Stripe has docs for adding a form for [variable amount in checkout](https://stripe.com/docs/recipes/variable-amount-checkout), but it has some confusing callbacks and references.
The important bit is how to setup and use Stripe's handler.

First, we need to load Stripe's checkout library. 
Add this script, `<script src="https://checkout.stripe.com/checkout.js"></script>`to the `<head>` of your site. 
Stripe docs say it's best to load it on all pages.

I'm going to assume you already have a React app setup. 
So let's create a StripeDonationForm component next and give it a textfield for the user to input their donation amonut and a submission button.
For simplicity+looks I am using [Material UI](https://material-ui.com/) to handle some of the form components.

```js
import React, { Component } from "react";
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";

const minDonationAmount = 0.5;

export default class StripeDonationForm extends Component {
	state = {
		donationAmount: 1,
		isDonationError: false,
		donationResponse: ""
	};

	static isDonationInvalid(amount) {
		return isNaN(amount) || amount < minDonationAmount;
	}

	handleDonationAmountChange = event => {
		const amount = event.target.value;
		this.setState({
			donationAmount: amount,
			isDonationError: StripeDonationForm.isDonationInvalid(amount)
		});
	};

	formSubmit = async event => {
		console.log("form submitted");
		event.preventDefault();

        //WHAT NEXT?
	};

	render() {
		return (
			<div>
				<p
					style={{
						display: (this.state.donationResponse.length > 0) ? "block" : "none"
					}}
				>
					{this.state.donationResponse}
				</p>
				<form style={{ textAlign: "center" }} onSubmit={this.formSubmit}>
					<TextField
						style={{ textAlign: "center" }}
						error={this.state.isDonationError}
						helperText="Minimum donation: $0.50"
						label="Donation Amount ($)"
						value={this.state.donationAmount}
						onChange={this.handleDonationAmountChange}
						type="number"
						margin="normal"
						inputProps={{
							min: 0
						}}
					/>
					<br />
					<Button variant="contained" color="primary" type="submit">
						Start Donation
					</Button>
				</form>
			</div>
		);
	}
}
```

This is a relatively simple component that keeps track of the user's desired donation amount and logs any errors that pop up.
Input validation simply ensures that the donation amount is a number and that it's greater than Stripe's $0.50 minimum charge (less than that it all goes to processing fees).
Now, we need to handle the donation.

First, add `/* global  StripeCheckout */` to the top of the file to prevent ESLint from crashing the build.
Now, setup the Stripe handler on your component's initialization. Add this function:

```
componentDidMount() {
    this.handler = StripeCheckout.configure({
        key: test_key, //Get from your Stripe account
        locale: "auto",
        name: "company name",
        description: "One-time donation",
        token: token => {
            // Send the donation to your server
            console.log("Submitting donation to server");

            fetch(`${backendUrl}/charge`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json" // JSON doesn't w
                },
                body: encodeURIComponent(
                    JSON.stringify({
                        stripeToken: token.id,
                        chargeAmount: Math.round(100 * this.state.donationAmount) // Needs to be an integer in cents
                    })
                )
            })
                .then(res => {
                    return res.text();
                })
                .then(txt => {
                    console.log(txt);
                    this.setState({ donationResponse: txt });
                })
                .catch(error => {
                    this.setState({
                        donationResponse:
                            "There was an issue sending your request. Please try again later"
                    });
                });
        }
    });

    // Close Checkout on page navigation:
    window.addEventListener(
        "popstate",
        function() {
            this.handler.close();
        }.bind(this)
    );
}
```

