---
title:  "Creating Birdu Part 2: Using the Generator"
blurb: "Utilize the generator to bootstrap a new project."
header: { img_url: "/images/icons/tech/phaser-logo.svg" }
author: James Lowrey
tags: Birdu,Phaser,HTML5,Javascript
---

<span class="caps">H</span>ow can you create a modular, maintainable, and standardized code project (especially in messy JS land)?
One great way is to use a generator to make an outline for you.
In this article we will cover the project's generator and how its pieces interact with one another.
Check out the [official generator documentation](https://github.com/rblopes/generator-phaser-plus/blob/master/docs/index.md) for an alternate, up-to-date explanation.

Phaser-Generator-Plus masters can move on to the [next article](/blog/Creating-Birdu-Part-3.html), starting the game.
If you weren't here [last time](/blog/Creating-Birdu-Part-1.html), we covered Birdu's tech stack.

<%= partial "partials/article_links.erb", locals: {
    resources: "
- [Birdu Repo](https://github.com/JTronLabs/Birdu)
- [Birdu on Google Play](https://play.google.com/store/apps/details?id=com.jtronlabs.birdu)
- [Phaser Repo](https://github.com/photonstorm/phaser)
- [Phaser Docs](https://phaser.io/docs/)
- [Phaser Plus Docs](https://github.com/rblopes/generator-phaser-plus/blob/master/docs/index.md)
- [Phaser 2.0 Tutorial - Flappy Bird](http://www.codevinsky.com/phaser-2-0-tutorial-flappy-bird-part-1/)
",
    software_versions: "
- [Ubuntu 16.04 LTS](http://www.ubuntu.com/download)
- [Phaser.js 2.6.2](http://phaser.io/docs/2.6.2/index)
- [Cordova 6.4.0](https://cordova.apache.org/docs/en/latest/)
- [Node 4.2.6](https://nodejs.org/en/)
- [NPM 3.5.2](https://www.npmjs.com/)
- [Generator Phaser Plus 1.1.0](https://github.com/rblopes/generator-phaser-plus)
"
  } %>

##Dependencies

Install Node, NPM, and our generator with [NVM](https://github.com/creationix/nvm).

~~~ bash
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash # Install NVM
export NVM_DIR="/home/james/.nvm"               # This loads nvm in current terminal
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm in current terminal
command -v nvm                                  # if installation worked, "nvm" will be printed
nvm install node                                # Install Node & NPM
nvm use default                                 # use NVM's node - just in case a system installation already exists
nvm which current                               # location of the current version of node - should have ".nvm" in the name
# Install global NPM packages - these will not need to go into the local node_modules folder of your project
npm -g install yo                               # Framework for generators, helps devs quickly build high quality web apps
npm -g install generator-phaser-plus            # Phaser.io project generator
npm -g install cordova                          # Compile JS apps to hybrid mobile apps
~~~

##Generate!

Let's get to it! First step, open up a terminal and install the [generator](https://github.com/rblopes/generator-phaser-plus).
If you haven't [installed Node](https://nodejs.org/en/download/package-manager/) yet, you will need it to install it first, as it is a dependency.

~~~ bash
mkdir birdu && cd $_ # Make a folder and enter into it
yo phaser-plus       # Generate!
npm install          # Once done with prompts, install dependencies
~~~

The generator will ask for your game's name ("Birdu"), a description ("Best game ever made"), desired physics system (Arcade Only), and a dev preference (Babel & ECMASCript modules).
For physics, Phaser supports Arcade, Ninja, and P2.
In that order they [increase in customizability, but decrease in performance](http://gamedev.stackexchange.com/questions/72930/difference-between-arcade-p2-and-ninja-physics-in-phaser).
Your physics system will vary based upon your goals and desired gameplay.
Birdu is simple. It treats all the birds as rectanges and collision is a simple (and fast) [AABB](http://stackoverflow.com/questions/22512319/what-is-aabb-collision-detection).
As you level up in development skill, you may need a different physics engine.

The "develop preference" question refers to how you choose to manage [JS dependencies](https://github.com/rblopes/generator-phaser-plus/blob/7614a54678f4d461de1c98a6fffd9f99fb562ba3/docs/managing-dependencies.md) in your project.
CommonJS uses "require" to import and use discrete JS modules, while the 2015 ECMAScript paradigm uses "import" (and Babel to make your code backwards compatible).
ECMA is newer and built-in to the language, so we'll be using that.

Anyways, the generator takes your answers, inserts the title & description text in the desired places, downloads & integrates your physics engine (it's modular), and starts the long process of downloading all your node dependencies to the node_modules folder.
The final output will look something like this

~~~ bash
├── gulpfile.js         #Gulp code responsible for building project
│   │
│   ├── lib             #Specific module configuration
│   │   └── bundler.js  #Browserify/Watchify support module
│   │
│   ├── tasks           #Gulp execution tasks/commands
│   │   ├── dev.js      #Dev build process
│   │   └── dist.js     #Distribution/Production build process
│   │
│   ├── config.js       #Config - Specify folder/file locations, module behaviors, etc
│   └── index.js        #Tie it all together!
│
├── node_modules        #Project dependencies
│   └── ...             #Seriously lots of dependencies
│
├── src                 #This is our game code!
│   │
│   ├── objects         #Main player, JumpingEnemy, Logo are all game objects. This is where bulk of the code will live
│   │   └── ...
│   │
│   ├── states          #Different screens/displays of the game
│   │   ├── Boot.js
│   │   ├── Preload.js  #Some example states are included in the initial generation
│   │   └── Game.js
│   │
│   ├── app.js          #Called from index.html to create, start, and adds states to Phaser's 'game' object
│   ├── assets.js       #JSON describing how to preload assets from the 'static/assets' directory
│   └── states.js       #List of all game states. Auto-updated if using generator to create states (covered soon)
│
├── static              #Static files that do not directly interact with game code. Examples: Game assets, web app assets, web pages, and more
│   │
│   ├── assets          #Game assets: images, music, JSON, etc
│   │   └── ...
│   │
│   └── index.html      #HTML that our game will live in! It will be copied to the build output.
│
├── .babelrc            #Babel        (compiles code to old JS versions)                    options
├── .editorconfig       #EditorConfig (maintains styles between disparate editors & IDEs)   options
├── .eslintrc.yml       #ESLint       (catches JS errors, enforces JS style, runs in Gulp)  options
├── .gitattributes      #Special instructions for using & customizing Git. I've never had to use it
├── .gitignore          #Specifies files you don't want to check into your remote Git repository
├── .yo-rc.json         #Our generator's Yeoman config. Allows generator to remember customization info from prompts, and use it in future
├── package.json        #NPM customization. Choose dev & production dependencies, specify NPM package meta info, writes scripts, and more
└── README.md           #Describe to consumers how to use and grok your software. A quick-start guide.
~~~

Whew!

##Generator Output

The code block above is the quick reference guide to the generator output, but some things could use a bit more explanation.

###gulpfile.js

This contains all of our javascript compilation logic.
The 'tasks' sub-directory is what you'll likely end up configuring if you add new development or production dependencies.
These files are currently set to wipe out the build output, minify files, bundle JS together into one file, and copy assets to build dir.
I did not have to modify anything for Birdu.

###node_modules

This houses all of our node project dependencies.
These dependencies are configured in 'package.json', and can be installed by running `npm install`.
Some people think you should check in dependencies to your VCS in case they get [yanked off of NPM](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/), but this is a relatively rare occurrence.
By default, .gitignore is set to not commit your dependencies.
If you choose to commit it, you will massively inflate your VCS files, compounding each time any dependency updates.
In the rare case something goes down, the NPM community will quickly add a [mirror or replacement](http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm).

###src

You guessed it, here's where the source code lives.

The 'states' folder contains [States](http://phaser.io/docs/2.6.2/Phaser.State.html): in-game screens/displays.
In order of usage, Birdu will contain Boot, Preload, Menu, Settings, Stats, Game, and GameOver.
Each state has a clearly defined purpose (Boot and Preload load assets into RAM while displaying "Loading..." animations) and may contain a variety of objects.

An object lives in the 'objects' folder, and is a self-contained module to be used in States.
An object could be as simple as an image, or as complicated as your game's player with its rich handling of user interactions, varied animations, complex game logic, etc.
Objects allow us to factor out code unrelated to State execution into self-contained, modular components, thus keeping our game maintainable.

The "app.js" file starts up the Phaser game.
If you want to change the game's size, initialize to a state other than Boot, or do anything fancy (unrelated to game logic) before start-up, this would be the place to do it.

"assets.js" is a really nice little file.
My first version of Birdu did not use this generator, and thus did not have an assets.js file.
Every asset had a corresponding line of preloading code, and also specified exact pixel values for character spritesheets.
It was error-prone, difficult to maintain, and inefficent (compared to texture atlases, which I learned about after using this generator).

"assets.js" solves this problem by using an [asset pack](https://phaser.io/docs/2.6.2/Phaser.Loader.html#pack), a JSON specification of your assets, to preload your components.
This file is that JSON (wrapped in a JavaScript class), that allows simple specification of asset paths + keys to be used with the Loader.
An earlier version of the generator had a near-complete description of how to use these features in the output of "assets.js", but the maintainer removed it to cut down on bloat and streamline the process.
You can find that original template [here](https://github.com/rblopes/phaser-plus-template/blob/2ef97955f08d857eef7f218f78856d03016ec0f1/src/assets.js), it's full of extremely helpful examples.

###static

This directory has the "assets" folder where images, sounds, fonts, etc belong, which are loaded using the "assets.js" file from above.
You can make a new sub-directory for each asset type, and specify its relative URL from "assets.js", allowing you to keep your assets organized.

The other file, "index.html", is the HTML page that our game will live on.
If you don't want the game to take up the full screen, you can use this page to stylize the HTML page's background.
You can also include external scripts, CSS, or modify the game's initialization call.

###Miscellaneous files

The other files don't have a parent directory, and thus will generally be used by other programs that expect them to be at the top level of your project.
BabelRC, editorconfig, eslint, yo-rc, and the git stuff are generally used by some plugins that come integrated with this project.
You may want to update the eslint file to fit your preferrences, and the gitignore file as your project advances, but the others probably won't require much customization.
You should describe your project in the README, giving readers (and future you), an overview on what you intend to do and how.

Package.json managemes your node environment.
Use it to list out all dependencies: development (like Babel) and production/deployment (like Phaser).
It can also contain meta-data like author's name and email, which is useful if you intend to publish on NPM.
You can also define one-line scripts in the "scripts" section, which you can run with

~~~bash
npm run-script myScript
~~~

This makes it easy to simplify a multi-step build, test, or deployment operation all into one bash call.
It comes with a "dist" command and a few other scripts for building the project, try running them to see what they do.

##Sub-Generators

In addition to the main generator, which creates the entire file structure discussed above, there are some sub-generators made for more specifc tasks.
These sub-generators are used for quick scaffolding while developing (instead of setup at the beginning, like the main generator).
You can use yeoman sub-generators by appending `: sub-gen-name` to the end of the original generator call.
So our new generator calls look like this

~~~bash
yo phaser-plus: object
yo-phaser-plus: state
~~~

###object

A prompt will be displayed asking what type of object you want to extend: Sprite, Group, TileSprite, etc.
There are many options availble, and this saves you from having to memorize the initialization code for each type.
After the prompt a new JS object will be created in the "objects" sub-directory.

###state

This is a bit simpler, as there is only one type of State.
After it is auto-created in the "states" sub-directory, the game file importing all the states will be updated for the new creation.

And that's it! You are now a phaser-plus expert.
As the project is updated, some aspects of this tutorial may come out of date - so be sure to check the [official documentation](https://github.com/rblopes/generator-phaser-plus/blob/master/docs/index.md).
In the next step, we will be making a Menu screen and discussing how to get started with Phaser.
