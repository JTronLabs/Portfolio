---
title:  'Publishing a Webpack2 Package on NPM'
header: { img_url: '/images/icons/tech/Npm-logo.svg' }
author: James Lowrey
tags: NPM,Webpack,Birdu,Phaser,phaser-ui
---

While working on [Birdu](phaser-birdu-1.html) and other [Phaser](https://phaser.io/) Games, I decided that I wanted to reuse some UI components between them.
There are a couple of UI libraries for Phaser already - [EZGUI](http://ezgui.ezelia.com/), [SlickUI](http://slick-ui.com/), [phaseslider](https://www.npmjs.com/package/phaseslider), [RSGUI](https://github.com/redsheep/RSGUI), and [more](https://github.com/Raiper34/awesome-phaser).
However none of them fit my use cases, so I decided to write my own and [publish the package to NPM](https://www.npmjs.com/package/phaser-ui).
In this article I cover how to write your own ES6+ library, bundle it with Webpack2+Babel+ESLint, consume it in a calling application, and publish to NPM.

<%= partial "partials/article_links.erb", locals: {
    resources: "
- [Webpack2](https://webpack.js.org/)
- [Webpack2 Concepts](https://webpack.js.org/concepts/#loaders)
- [Webpack2 Configuration](https://webpack.js.org/concepts/configuration/)
- [Getting Started with Webpack2](https://blog.madewithenvy.com/getting-started-with-webpack-2-ed2b86c68783#.29xyo6lob)
- [NPM - package.json](https://docs.npmjs.com/files/package.json)
- [NPM - Publishing Packages](https://docs.npmjs.com/getting-started/publishing-npm-packages)
",
    software_versions: "
- [Ubuntu 16.04 LTS](http://www.ubuntu.com/download)
- [NPM 4.3.0](https://github.com/sackmotion/motion)
- [Node 7.7.1](https://github.com/sackmotion/motion)
- [Webpack 2.2.1](https://webpack.js.org/)
- [ESLint 3.16.1](http://eslint.org/)
- [Babel-core 6.23.1](https://www.npmjs.com/package/babel-core)
"
  } %>

##Writing the Library

First, make sure you have a good use-case for your library.
Make sure someone hasn't already written one and go search Google.
Libraries exist to avoid re-writing solved problems, so if you are copy+pasting code between projects then a library could be good for you.
Write it once, have it updated everywhere, and share with others.

Now we can get started.
Create a new directory and initialize your new NPM package with `npm init`.

~~~ bash
mkdir MY_NEW_PROJECT && cd MY_NEW_PROJECT
mkdir src && mkdir test && mkdir build
touch webpack.config.js && touch .editorconfig && touch .eslintrc && touch .gitignore && touch README.md
git init            #I like to use Git for my VCS, you can use whatever
npm init
npm install --save-dev webpack babel-core babel-loader babel-preset-es2015 eslint eslint-loader
~~~

The [`npm init` command](https://docs.npmjs.com/cli/init) will ask you some questions about your project so it can initilize your package info.
You can leave the prompts empty for now, and we will overwrite them as we go (or you can do some research and fill them out now).
You may notice this little script also initilizes src, test, and build folders as well as [webpack.config.js](https://webpack.js.org/concepts/configuration/), [editor config](http://editorconfig.org/), [eslint](http://eslint.org/), [gitignore](https://git-scm.com/docs/gitignore) configurations and a README file.
Check out [my library](https://github.com/JTronLabs/phaser-ui) to copy+paste default configurations; these tools make it easy to manage your code and editor.
The node modules we install are [Webpack2](https://webpack.js.org/), [Babel](https://babeljs.io/), and [eslint](http://eslint.org/).
They bundle JS code into a single file, transpile it (make it work on old browsers), and check your source code for errors, respectively.

If you're using es2015, you want to download that preset for babel (it is included in the above script).
Then you need to add that configuration to your package.json:

~~~ json
{ ...
  "babel": {
    "presets": [
      "es2015"
    ]
},
... }
~~~

Now that we have the basic goodies we can start writing source code.
Go to your src/ folder and create an index.js file.
Here, [export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) all your JS components in order to make them useable by external code (consumers).

~~~ javascript
export { default as ProgressBar } from './Progress/ProgressBar.js';
// More exports...
~~~

Now we need to create the ProgressBar class that we have exported in `index.js`.

~~~ bash
#Bash script to create ProgressBar
mkdir Progress && cd Progress && touch ProgressBar.js
~~~

Open the ProgressBar file and fill it with a [default](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/default) class.
This is the class we are exporting from `index.js`.

~~~ JavaScript
import Graphics from '../Misc/Graphics';

export default class ProgressBar extends Progress {
  //...
}
~~~

Notice that we only create one 'class' (I know, JS doesn't use real [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)) in this file, a default class.
You don't have to do this, but it helps to keep things modular.
We also imported the Graphics object, just to give an example of how you might do so.
Graphics would be created in the same way as ProgressBar, and since it's imported you can use its functions as you write ProgressBar.

##Bundling with Webpack2

[Webpack](https://webpack.js.org) is similar to Browserify, both bundle your many JS files into a single file.
They also can process your files via loaders (Webpack) or plugins (Browserify).
This is also pretty similar to Gulp and Grunt.
Gulp/Grunt are task runners so they perform different functions from Webpack/Browserify, but it is possible to use [Webpack without a task runner](https://www.toptal.com/front-end/webpack-browserify-gulp-which-is-better) - that's what I'm doing here.
Task runner require code, Webpack requires configuration.

Webpack recently upgraded to Webpack2, so a lot of the online tutorials use outdated Webpack1 configuration - stuff that is not compatible.
[Here is the new config documentation.](https://webpack.js.org/configuration/)
For phaser-ui I currently have [entry](https://webpack.js.org/configuration/entry-context/#entry) (define first file Webpack should process - index.js), [output](https://webpack.js.org/configuration/entry-context/#entry) (configure the build), [externals](https://webpack.js.org/configuration/externals/) (allows use of yet-undefined variables e.g. Phaser, jQuery, React), and [rules](https://webpack.js.org/configuration/module/#module-rules) (modifies how module is created e.g. Babel+ESLint) defined on my webpack.config.js.

The only parts I found confusing were accidentally using old documentation, and defining the right output attributes.
Since we are making a library, you must add `library` and `libraryTarget` properties to your output config.
If you want users to import your library into JS files, then make the [target](https://webpack.js.org/configuration/output/#output-librarytarget) 'umd', if you want them to download it via a `script` tag and use a global variable, you can leave the target blank (var is default).
You can see how to do this in more detail at Webpack's ['Authoring Libraries'](https://webpack.js.org/guides/author-libraries/) article.

While you're modifying the output object, you should specify the `path` and `filename` of your build output.
Then, copy that value over to your package.json's `main` configuration - this allows consumers of your package to use the right files after downloading.

Once you have the output portion set up correctly, you can add `rules` in the module section.
[Rules](https://webpack.js.org/configuration/module/#rule) can be used to setup parser options, [loaders](https://webpack.js.org/concepts/#loaders), and more.
We are using the Babel and ESLint loaders, but you may also want to add in a [live reloading development server](https://github.com/webpack/webpack-dev-server) or more.

At the end, your webpack may look something like this:

~~~ javascript
var webpack = require('webpack');

module.exports = {
  entry: './src/index.js',
  //setup the webpack output as a library
  output: {
    path: 'build/',
    filename: 'phaser-ui.js',
    libraryTarget: 'umd',
    library: 'phaserUi'
  },
  //needed in src library when extending/using Phaser objects/code. Relies on Consumers to import/include phaser and thus have the 'Phaser' variable globally available
  externals: {
    Phaser: 'Phaser'
  },
  module: {
    rules: [{
        enforce: 'pre', //check source files, not modified by other loaders (like babel-loader)
        test: /(\.jsx|\.js)$/, //files to check
        exclude: /(node_modules|bower_components)/, //files to ignore
        loader: 'eslint-loader',
        options: {
          emitWarning: true //do not crash build when finding a linting error
        }
      },
      {
        test: /(\.jsx|\.js)$/,
        exclude: /(node_modules|bower_components)/,
        loader: 'babel-loader',
        query: {
          presets: ['es2015']
        }
      }
    ]
  }
};
~~~

##Publishing on NPM

This is a pretty easy process, outlined in NPM documentation [here](https://docs.npmjs.com/getting-started/publishing-npm-packages).
Before you publish, you should make sure your package.json looks ok, here's mine for reference:

~~~ javascript
{
  "name": "phaser-ui",
  "version": "0.0.3",
  "description": "Easy to use UI components for the Phaser.io game engine",
  "main": "build/phaser-ui.js",
  "scripts": {
    "test": "npm run build && cd test && npm install phaser-ui && npm start",
    "build": "webpack --display-error-details"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JTronLabs/phaser-ui.git"
  },
  "keywords": [
    "phaser",
    "game-dev",
    "UI"
  ],
  "author": "JTronLabs",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/JTronLabs/phaser-ui/issues"
  },
  "babel": {
    "presets": [
      "es2015"
    ]
  },
  "homepage": "https://github.com/JTronLabs/phaser-ui#readme",
  "devDependencies": {
    "babel-core": "^6.23.1",
    "babel-loader": "^6.3.2",
    "babel-preset-es2015": "^6.22.0",
    "eslint": "^3.16.1",
    "eslint-loader": "^1.6.3",
    "webpack": "^2.2.1"
  }
}
~~~

Now that your package is good, you can publish!

~~~ bash
npm adduser #create or login to your NPM account
npm publish #publish! Everything not ignored (by .gitignore or .npmignore) will be sent to NPM. Users will use the 'main' file when they download your package
~~~

If you ever want to update, simply up your version number and publish again

~~~ bash
npm version <new_version_number> #semantic versioning release types, patch, minor, or major
npm publish
~~~

Now you can navigate to `https://www.npmjs.com/package/MY_PACKAGE_NAME` and it will be live!
